/*

Given a string, find if there is any sub-sequence that repeats itself.
A sub-sequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

Input:
string

Output:

0/1
0 -> No
1 -> Yes 
Example:

abab ------> yes, ab is repeated. So, return 1. 
abba ------> No, a and b follow different order. So, return 0. 
NOTE : sub-sequence length should be greater than or equal to 2

*/

public class Solution {
    
    int longest(String A,int s1,int s2,int[][] cache)
    {
        if(s1==A.length()||s2==A.length())
        return 0;
        if(cache[s1][s2]!=-1)
        return cache[s1][s2];
        if(s1!=s2&&A.charAt(s1)==A.charAt(s2))
        {
        cache[s1][s2]=1+longest(A,s1+1,s2+1,cache);
        return cache[s1][s2];
        }
        cache[s1][s2]=Math.max(longest(A,s1,s2+1,cache),longest(A,s1+1,s2,cache));
        return cache[s1][s2];
    }
    
    public int anytwo(String A) {
        if(A.length()<3)
        return 0;
        int[][] cache=new int[A.length()][A.length()];
        for(int i=0;i<A.length();i++)
            for(int j=0;j<A.length();j++)
                cache[i][j]=-1;
        int temp=longest(A,0,1,cache);
        if(temp<2)
        return 0;
        return 1;
    }
}
